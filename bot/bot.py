import re
import os
import mimetypes
import datetime
import logging
import random
from threading import Timer
from functools import wraps

from telegram import File, Update
from telegram.ext import ApplicationBuilder, ContextTypes, CommandHandler, ConversationHandler, MessageHandler, filters

from bot.s3 import upload_file as s3_upload_file, list_files as s3_list_files, get_file_obj as s3_get_file_obj
from bot.weather import get_forecast
from bot.war_stats import get_war_stats

TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
TELEGRAM_CHAT_ID = os.getenv('TELEGRAM_CHAT_ID')

logging.basicConfig(format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO)
logger = logging.getLogger(__name__)

reply_break = False
REPLY_BREAK_DURATION = 10
REPLY_PHRASES = [
    (['—Å–æ–±–∞–∫–∞'], '—Å–æ–±–∞–∫–∞–∞–∞–∞, –≤–æ–Ω–∞ –∫—Ä–∞—â–µ –Ω—ñ–∂ –≤–∏ –ª—é–¥–∏, –ª—é–¥—è–º –¥–æ–≤—ñ—Ä—è—Ç–∏ –Ω–µ –º–æ–∂–Ω–æ, –æ—Ç —Å–æ–±–∞–∫–∏ –≤–æ–Ω–∏ –Ω–∞–π–∫—Ä–∞—â—ñ...'),
    (['—á–æ—Ä—Ç'], '–∞ —â–æ –æ–¥—Ä–∞–∑—É —á–æ—Ä—Ç????'),
    (['–±–æ—Ç'], '–∞? —â–æ –≤–∂–µ –±–æ—Ç —Ç–æ?'),
    (['–ø–µ–ø—Å—ñ'], '–∫–æ–∫ –∫–æ–ª–∞ –∫—Ä–∞—â–µ'),
    (['–∫–æ–ª–∞'], '–ø–µ–ø—Å—ñ –∫—Ä–∞—â–µ'),
    (['—Å–ª–∞–≤–∞ —É–∫—Ä–∞—ó–Ω—ñ', '—Å–ª–∞–≤–∞ —É–∫—Ä–∞–∏–Ω–µ'], '–ì–µ—Ä–æ—è–º –°–ª–∞–≤–∞!'),
    (['—Ç–∞–∫'], '–ø—ñ–∑–¥–∞–∫'),
    (['—Å–∞–ª–æ'], '–∞ –±–æ—Ä—â?'),
    (['–±–æ—Ä—â'], '–∞ —Å–∞–ª–æ?'),
    (['–∑–≥–æ–¥–Ω–∞, –∑–≥–æ–¥–µ–Ω'], '–∑ —á–∏–º? —Ç–∏ –∂ –¥—É—Ä–Ω–∞ –ª—é–¥–∏–Ω–∞, —Ç–æ–±—ñ –¥–∞–ª–µ–∫–æ –¥–æ —Ä–æ–±–æ—Ç–∞'),
    (['–º–∞–≥–∞–∑–∏–Ω', '–Ω–æ–≤—É—Å', '—Å—ñ–ª—å–ø–æ', '–∫–∏—à–µ–Ω—è', '—Ñ–æ—Ä–∞'], '–∫—É–ø–∏—Ç—å –º–µ–Ω—ñ –ø–∏–∏–∏–∏–≤–≤–∞–∞–∞–∞–∞'),
    (['—Å—É–∫–∞'], 'https://uk.wikipedia.org/wiki/%D0%9C%D1%96%D0%B7%D0%BE%D0%B3%D1%96%D0%BD%D1%96%D1%8F'),
    (['—Ä–∞—à–∫–∞'], '–Ω–µ "—Ä–∞—à–∫–∞", –∞ –ø–∏–¥–æ—Ä–∞—Ö–∏—è –±–ª–∏–Ω–æ–ª–æ–ø–∞—Ç–Ω–∞—è —Å–∫–æ—Ç–æ—É–±–ª—é–¥–∏—è, —Å–≤–∏–Ω–æ—Å–æ–±–∞—á–∏–π —Ö—É–π–ª–æ—Å—Ç–∞–Ω, '
                '—Ä–∞–±—Å–∫–∏–µ –≤—ã–º–∏—Ä–∞—Ç—ã –∏ –Ω–µ—Ñ—Ç–µ–¥—ã—Ä–Ω–æ–µ –ø—ã–Ω–µ–±–∞–±–≤–µ'),
    (['—Ö–æ–∑—è–π–∫–∞', '—Ö–æ–∑—è–π–∫–∏', '—Ö–æ–∑—è–π–∫—É'], '–Ø –ø—ñ–∑–¥–æ–ª—ñ–≤, –∂–æ–ø–æ–ª—ñ–∑ —Ö–æ–∑—è–π–∫–∏, –±—É–¥—É —É–Ω—ñ—Ç–∞–∑–æ–º-–º–æ—á–µ–≥–ª–æ—Ç–æ–º. –•–æ—á—É –ª—ñ–∑–∞—Ç–∏ '
                                        '–≤–æ–ª–æ—Å–∞—Ç—É, –Ω–µ–º–∏—Ç—É –ø—ñ–∑–¥—É –ø—ñ–¥ —á–∞—Å —ó—ó –º–µ–Ω—Å—Ç—Ä—É–∞—Ü—ñ—ó. –Ø–∫—â–æ —Ö–æ–∑—è–π–∫–∞ —Ç—Ä–∞—Ö–∞–ª–∞—Å—å ‚Äî '
                                        '—Ç–æ —Ç—ñ–ª—å–∫–∏ –ø—ñ—Å–ª—è —Ä–µ—Ç–µ–ª—å–Ω–æ–≥–æ –º–∏—Ç—å—è. –•–æ—á—É –ø–∏—Ç–∏ –º–æ—á—É —ñ –≥–ª–æ—Ç–∞—Ç—å –≤—Å—ñ –≤–∏–¥—ñ–ª–µ–Ω–Ω—è '
                                        '—Ö–æ–∑—è–π–∫–∏. –í–∏–ª–∏–∂—É –∂–æ–ø—É —É –∞–Ω—É—Å—ñ.'),
]


def restricted(func):
    """Restrict usage of func to allowed chat only"""
    @wraps(func)
    async def wrapped(update, context, *args, **kwargs):
        chat_id = update.effective_chat.id
        if str(chat_id) != str(TELEGRAM_CHAT_ID):
            await context.bot.send_message(chat_id, text='–Ü–¥–∏ –Ω–∞—Ö—É–π, —Ü—ñ –∫–æ–º–∞–Ω–¥–∏ —Ç—ñ–∫–∏ –¥–ª—è —Ö–æ–∑—è—ó–≤!')
            return
        return await func(update, context, *args, **kwargs)
    return wrapped


def digest_text():
    """Digest message based on weekday"""
    weekday = datetime.datetime.today().weekday()
    weekdays = ['–ü–æ–Ω–µ–¥—ñ–ª–æ–∫', '–í—ñ–≤—Ç–æ—Ä–æ–∫', '–°–µ—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä', 
                '–ü º—è—Ç–Ω–∏—Ü—è', '–°—É–±–æ—Ç–∞', '–ù–µ–¥—ñ–ª—è']
    
    return f"C—å–æ–≥–æ–¥–Ω—ñ {weekdays[weekday].lower()}.\n\n{get_forecast()}\n\n{get_war_stats()}"


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Command: Welcome message"""
    user = update.message.from_user
    logger.info("User %s started the conversation.", user.username)
    await update.message.reply_text(
        "–ü—Ä–∏–≤—ñ—Ç —Ö–æ–∑—è—ó–≤–∞! –Ø —á–æ—Ä—Ç —Ç–∞—Ä–∞—Å üòà \n\n"
        "–î–∏–≤–∏—Å—å –∫–æ–º–∞–Ω–¥–∏ —É –º–µ–Ω—é –∫–æ–º–∞–Ω–¥.")


async def morning(context: ContextTypes.DEFAULT_TYPE) -> None:
    """Callback that show digest at morning"""
    text = '–î–æ–±—Ä–∏–π —Ä–∞–Ω–æ–∫! ü´†\n\n' + digest_text()
    await context.bot.send_message(context.job.chat_id, text=text)


async def digest(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Command: show digest message and random cat"""
    await context.bot.send_message(update.effective_chat.id, text=digest_text())
    await random_cat(update, context)


async def random_cat(update: Update, context:ContextTypes.DEFAULT_TYPE) -> None:
    """Command: show random cat"""
    await context.bot.send_photo(
        chat_id=update.effective_chat.id,
        caption='–•—É–π–æ–≤–∏–π –¥–µ–Ω—å? –û—Ç —Ç–æ–±—ñ –∫—ñ—Ç –¥–ª—è –Ω–∞—Å—Ç—Ä–æ—é!',
        photo=f'https://thiscatdoesnotexist.com/?ts={datetime.datetime.now()}')


def disable_break():
    global reply_break
    reply_break = False
    logger.info('Reply break: OFF')


def enable_break():
    global reply_break
    reply_break = True
    logger.info('Reply break: ON')
    Timer(REPLY_BREAK_DURATION, disable_break).start()


# TODO: Refactor 0(n+) in phrases
async def reply(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Listen to every chat message and reply with phrase or photo"""
    if reply_break:
        return

    for phrase in REPLY_PHRASES:
        for key in phrase[0]:
            if re.match(r'^\b\S+\b$', key):
                message = re.findall(r'\b\S+\b', str(update.message.text).lower())
                if key in message:
                    await update.message.reply_text(phrase[1])
                    enable_break()
            elif re.search(key, update.message.text, re.IGNORECASE) and not re.match(r'^\b\S+\b$', key):
                await update.message.reply_text(phrase[1])
                enable_break()

    if random.random() < 0.05:
        files = s3_list_files('flatmatebot')
        index = random.randrange(0, len(files))
        photo = s3_get_file_obj(files[index]['key'])['Body'].read()
        await update.message.reply_photo(photo=photo, reply_to_message_id=update.message.id)
        enable_break()


@restricted
async def add_meme(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text('–í—ñ–¥–ø—Ä–∞–≤ –º–µ–Ω—ñ –º—ñ–º—ñ—Å, —â–æ–± –∑–±–µ—Ä–µ–≥—Ç–∏ –¥–æ –∫–æ–ª–µ–∫—Ü—ñ—ó.')
    return 1


async def add_meme_done(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text('–°–ø—Ä–æ–±—É–π –∫–æ–º–∞–Ω–¥—É –∑–Ω–æ–≤ —á–∏ –≤—ñ–¥ º—ó–±–∏—Å—å.')
    return ConversationHandler.END


async def image_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    attachment = update.message.effective_attachment
    if isinstance(attachment, list):
        attachment = attachment[-1]

    if attachment.file_size > 20 * 1024 * 1024:
        await update.message.reply_html('–ó–∞–≤–µ–ª–µ–∫—É –∫–∞—Ä—Ç–∏–Ω–∫—É —Å—É—î—à, —Ö–ª–æ–ø—á–µ.')
        return

    file = await attachment.get_file()

    def get_original_file_name():
        original_file_name = os.path.basename(file.file_path)
        if hasattr(attachment, 'file_name'):
            original_file_name = attachment.file_name
        return original_file_name

    file_name = get_original_file_name()
    mime_type = mimetypes.MimeTypes().guess_type(file_name)[0]

    if not os.path.isdir('tmp'):
        os.mkdir('tmp')

    tmp_file_name = f'tmp/{datetime.datetime.timestamp(datetime.datetime.now())}'
    file = await File.download_to_drive(file, tmp_file_name)
    s3_upload_file(file, 'flatmatebot', file_name, mime_type, 'public-read')
    try:
        os.unlink(tmp_file_name)
    except Exception as e:
        logger.error(e)
    await update.message.reply_text(text='–ó–±–µ—Ä—ñ–≥!')
    return ConversationHandler.END


async def forecast(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Command: show forecast"""
    await update.message.reply_text(get_forecast())


async def war_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Command: show war stats"""
    await update.message.reply_text(get_war_stats())


async def chat_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Command: show chat information"""
    await update.message.reply_text(f'chat_id: {update.effective_chat.id}')


async def unknown(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Command: answer to unknown command"""
    await update.message.reply_text('–©–æ —Ü–µ –∑–∞ –∫–æ–º–∞–Ω–¥–∞? –¢–∏ —â–æ –¥–µ–±—ñ–ª?')


async def post_init(application: ApplicationBuilder) -> None:
    await application.bot.set_my_commands([
        ('start', '–í—ñ—Ç–∞–Ω–Ω—è!'),
        ('add_meme', '–ü–æ–ø–æ–≤–Ω–∏—Ç–∏ –º–µ–º–∞–ø–µ–¥—ñ—é –¢–∞—Ä–∞—Å–∞'),
        ('digest', '–©–æ —Ç–∞–º —Å—å–æ–≥–æ–¥–Ω—ñ?'),
        ('forecast', '–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥–∏'),
        ('random_cat', '–ü–æ–∫–∞–∑–∞—Ç–∏ —Ä–∞–Ω–¥–æ–º–Ω—É –∫—ñ—Ç—Ü—é'),
        ('war_stats', '–ü–æ–∫–∞–∑–∞—Ç–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –º–µ—Ä—Ç–≤–æ—ó —Ä—É—Å–Ω—ñ'),
    ])


def main():
    logger.info("üñ§ Taras Bot")
    application = ApplicationBuilder().token(TELEGRAM_TOKEN).post_init(post_init).build()

    add_meme_conv = ConversationHandler(
        entry_points=[CommandHandler('add_meme', add_meme)],
        states={
            1: [MessageHandler(filters.PHOTO, image_handler)]
        },
        fallbacks=[MessageHandler(filters.TEXT, add_meme_done)],
        per_user=True,
    )

    # Show digest at every morning 9:00 utc
    application.job_queue.run_daily(morning, time=datetime.time(hour=9, minute=0),
                                    chat_id=TELEGRAM_CHAT_ID, name='morning message', days=(0, 1, 2, 3, 4, 5, 6))

    reply_handler = MessageHandler(filters.TEXT & ~filters.COMMAND, reply)
    digest_handler = CommandHandler('digest', digest)
    random_cat_handler = CommandHandler('random_cat', random_cat)
    forecast_handler = CommandHandler('forecast', forecast)
    war_stats_handler = CommandHandler('war_stats', war_stats)
    chat_info_handler = CommandHandler('chat_info', chat_info)
    unknown_handler = MessageHandler(filters.COMMAND, unknown)

    application.add_handler(add_meme_conv)
    application.add_handler(reply_handler)
    application.add_handler(digest_handler)
    application.add_handler(random_cat_handler)
    application.add_handler(forecast_handler)
    application.add_handler(war_stats_handler)
    application.add_handler(chat_info_handler)
    application.add_handler(unknown_handler)
    
    application.run_polling()


if __name__ == '__main__':
    main()
